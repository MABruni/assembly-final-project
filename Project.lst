Microsoft (R) Macro Assembler Version 14.29.30148.0	    06/10/23 01:15:05
1Low-level I/O procedures     (Proj6_brunimom.asm	     Page 1 - 1


				TITLE Low-level I/O procedures     (Proj6_brunimom.asm)

				; Author: Miguel Angel Bruni Montero
				; Last Modified: 6/10/23
				; OSU email address: brunimom@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: Project 6 - String Primitives and Macros    Due Date: 6/11/23
				; Description: The program asks user for number input, registers this input as a string
				; and uses low-level I/O procedures to store these strings as integers in an array. Then,
				; it calculates the sum and average of these numbers. Finally, it prints back the list of
				; numbers as strings, the sum and the average.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Prompts the user to input a number and stores it as a string in answerAddress.
				;
				; Preconditions: None, saves and restores registers used.
				;
				; Receives:
				; promptAddress = prompt address
				; answerAddress = address to store the user's answer
				; buffer = maximum size for the user's answer
				; charInput = number of characters in the user's input
				;
				; returns:
				; answerAddress = user's answer
				; charInput = number of characters in user's answer
				; ---------------------------------------------------------------------------------
				mGetString MACRO    promptAddress,  answerAddress,  buffer,   charInput
				    ; Saves used registers
				    push    edx         
				    push    ecx
				    push    eax

				    mDisplayString  promptAddress       ; Display prompt
				    mov     edx,    answerAddress        
				    mov		ecx,    buffer  
				    call    ReadString
				    mov     answerAddress,  edx         ; Save user answer      
				    mov     charInput,      eax         ; Save characters inputted

				    ; Restores used registers
				    pop     eax
				    pop     ecx         
				    pop     edx
				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Prints a string passed as an argument to the console.
				;
				; Preconditions: None, saves and restores registers used.
				;
				; Receives:
				; stringAddress = address of the string to be printed.
				;
				; returns: None
				; ---------------------------------------------------------------------------------
				mDisplayString MACRO    stringAddress
				    push    edx

				    mov     edx,    stringAddress    ; Memory location of the string
				    call    WriteString

				    pop     edx
				ENDM

 00000000			.data

 00000000 41 53 53 49 47	greeting	    BYTE	"ASSIGNMENT 6: Designing low-level I/O procedures by Miguel Angel Bruni",13,10,0
	   4E 4D 45 4E 54
	   20 36 3A 20 44
	   65 73 69 67 6E
	   69 6E 67 20 6C
	   6F 77 2D 6C 65
	   76 65 6C 20 49
	   2F 4F 20 70 72
	   6F 63 65 64 75
	   72 65 73 20 62
	   79 20 4D 69 67
	   75 65 6C 20 41
	   6E 67 65 6C 20
	   42 72 75 6E 69
	   0D 0A 00
 00000049 50 6C 65 61 73	intro1		    BYTE	"Please provide 10 signed decimal integers. Each number needs to be small enough to fit inside a 32 bit register.",13,10,0
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 20 45 61
	   63 68 20 6E 75
	   6D 62 65 72 20
	   6E 65 65 64 73
	   20 74 6F 20 62
	   65 20 73 6D 61
	   6C 6C 20 65 6E
	   6F 75 67 68 20
	   74 6F 20 66 69
	   74 20 69 6E 73
	   69 64 65 20 61
	   20 33 32 20 62
	   69 74 20 72 65
	   67 69 73 74 65
	   72 2E 0D 0A 00
 000000BC 41 66 74 65 72	intro2		    BYTE	"After you have finished inputting the raw numbers I will display a list of the integers, their sum, and their average value.",13,10,0
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 20 6F 66 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 20 76 61
	   6C 75 65 2E 0D
	   0A 00
 0000013B 50 6C 65 61 73	userPrompt	    BYTE	"Please, enter a signed integer: ",0
	   65 2C 20 65 6E
	   74 65 72 20 61
	   20 73 69 67 6E
	   65 64 20 69 6E
	   74 65 67 65 72
	   3A 20 00
 0000015C 49 6E 76 61 6C	error           BYTE    "Invalid input. Please enter a valid integer.", 0
	   69 64 20 69 6E
	   70 75 74 2E 20
	   50 6C 65 61 73
	   65 20 65 6E 74
	   65 72 20 61 20
	   76 61 6C 69 64
	   20 69 6E 74 65
	   67 65 72 2E 00
 00000189 54 68 65 20 6E	numbersText     BYTE    "The numbers you inputted were: ",0
	   75 6D 62 65 72
	   73 20 79 6F 75
	   20 69 6E 70 75
	   74 74 65 64 20
	   77 65 72 65 3A
	   20 00
 000001A9 53 75 6D 20 6F	sumText         BYTE    "Sum of your numbers: ", 0
	   66 20 79 6F 75
	   72 20 6E 75 6D
	   62 65 72 73 3A
	   20 00
 000001BF 54 72 75 6E 63	averageText     BYTE    "Truncated average of your numbers: ", 0
	   61 74 65 64 20
	   61 76 65 72 61
	   67 65 20 6F 66
	   20 79 6F 75 72
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 000001E3 2C 20			comma           BYTE    ", "
 000001E5 00000000		bytesRead       DWORD   0
 000001E9  0000000A [		inputArray      SDWORD  10 DUP(?)
	    00000000
	   ]
 00000211 00000004		arraySize       DWORD   TYPE inputArray
 00000215  00000029 [		userAnswer      DWORD   41 DUP(?)
	    00000000
	   ]
 000002B9 00000028		inputBuffer     DWORD   40
 000002BD  0000000E [		stringResult    DWORD   14 DUP(?)
	    00000000
	   ]
 000002F5 00000000		tooBig          DWORD   0
 000002F9 00000000		readValResult   SDWORD  0
 000002FD 00000000		sum             SDWORD  0
 00000301 0000000A		count           SDWORD  10
 00000305 00000000		average         SDWORD  0

 00000000			.code
 00000000			main PROC
				    
				    mDisplayString      OFFSET  greeting
 00000000  52		     1	    push    edx
 00000001  BA 00000000 R     1	    mov     edx,    OFFSET  greeting    ; Memory location of the string
 00000006  E8 00000000 E     1	    call    WriteString
 0000000B  5A		     1	    pop     edx
				  
				    mDisplayString      OFFSET  intro1
 0000000C  52		     1	    push    edx
 0000000D  BA 00000049 R     1	    mov     edx,    OFFSET  intro1    ; Memory location of the string
 00000012  E8 00000000 E     1	    call    WriteString
 00000017  5A		     1	    pop     edx

				    mDisplayString      OFFSET  intro2
 00000018  52		     1	    push    edx
 00000019  BA 000000BC R     1	    mov     edx,    OFFSET  intro2    ; Memory location of the string
 0000001E  E8 00000000 E     1	    call    WriteString
 00000023  5A		     1	    pop     edx

 00000024  E8 00000000 E	    call    Crlf
 00000029  8B 0D 00000301 R	    mov     ecx,        count
 0000002F  BF 000001E9 R	    mov     edi,        OFFSET  inputArray      ; Load the array in edi to store results.

				    ; ----------------------------------------------------
				    ; Get user's input as a string, performs data validation, converts the result to a signed integer
				    ;       and stores that result in inputArray for future calculations.
				    ; ----------------------------------------------------
 00000034			    _inputs:
				        ; Passes parameters to ReadVal
 00000034  68 000002F5 R	        push    OFFSET      tooBig              ;[ebp+32]
 00000039  68 0000015C R	        push    OFFSET      error               ;[ebp+28]
 0000003E  68 000002F9 R	        push    OFFSET      readValResult       ;[ebp+24]
 00000043  68 0000013B R	        push    OFFSET      userPrompt          ;[ebp+20]
 00000048  68 00000215 R	        push    OFFSET      userAnswer          ;[ebp+16]
 0000004D  FF 35 000002B9 R	        push    inputBuffer                     ;[ebp+12]
 00000053  68 000001E5 R	        push    OFFSET      bytesRead           ;[ebp+8]
 00000058  E8 000000DC		        call    ReadVal

				         ; If number is too big, prevents ecx from decrementing and asks for new input
 0000005D  83 3D 000002F5 R	        cmp     tooBig,     1
	   01
 00000064  75 0D		        jne     _addResult
 00000066  41			        inc     ecx                            
 00000067  C7 05 000002F5 R	        mov     tooBig,     0
	   00000000
 00000071  E2 C1		        LOOP    _inputs

 00000073			    _addResult:
				        ; If number is correct, stores result in inputArray.
 00000073  A1 000002F9 R	        mov     eax,        readValResult
 00000078  FC			        cld
 00000079  AB			        stosd
 0000007A  E2 B8		        LOOP    _inputs
 0000007C  E8 00000000 E	        call    Crlf

				    ; Code to calculate sum
 00000081  8B 0D 00000301 R	    mov     ecx,        count
 00000087  33 D2		    xor     edx,        edx                 ; Clears edx to hold sum
 00000089  BE 000001E9 R	    mov     esi,        OFFSET inputArray   ; Loads input array in esi

 0000008E			    _calculate:
 0000008E  FC			        cld
 0000008F  AD			        lodsd                               ; Loads array values in eax
 00000090  03 D0		        add     edx,        eax             

 00000092			    _continue:
 00000092  E2 FA		        LOOP    _calculate
 00000094  89 15 000002FD R	        mov     sum,        edx             ; Saves sum in variable

				        ; Code to calculate average
 0000009A  A1 000002FD R	        mov     eax,        sum
 0000009F  33 D2		        xor     edx,        edx
 000000A1  BB 0000000A		        mov     ebx,        10
 000000A6  99			        cdq
 000000A7  F7 FB		        idiv    ebx
 000000A9  A3 00000305 R	        mov     average,    eax             ; Saves average in variable

				        ; WriteVal calls
 000000AE  8B 0D 00000301 R	        mov     ecx,        count
 000000B4  BE 000001E9 R	        mov     esi,        OFFSET inputArray
 000000B9  8B 15 00000211 R	        mov     edx,        arraySize
				        mDisplayString      OFFSET numbersText  ; Prints text preceding results
 000000BF  52		     1	    push    edx
 000000C0  BA 00000189 R     1	    mov     edx,    OFFSET numbersText    ; Memory location of the string
 000000C5  E8 00000000 E     1	    call    WriteString
 000000CA  5A		     1	    pop     edx

 000000CB			    _printNumbersAsStrings:
 000000CB  68 000002BD R	        push    OFFSET stringResult         ;[ebp+12]
 000000D0  FF 36		        push    [esi]                       ;[ebp+8]
 000000D2  E8 0000018F		        call    WriteVal                    ; Prints to screen values in the array.

 000000D7  03 35 00000211 R	        add     esi,        arraySize       ; Moves to next object in array.
 000000DD  83 F9 01		        cmp     ecx,        1
 000000E0  74 0C		        je      _noComma
				        mDisplayString  OFFSET comma        ; Displays commas between strings.
 000000E2  52		     1	    push    edx
 000000E3  BA 000001E3 R     1	    mov     edx,    OFFSET comma    ; Memory location of the string
 000000E8  E8 00000000 E     1	    call    WriteString
 000000ED  5A		     1	    pop     edx

 000000EE			    _noComma:
 000000EE  E2 DB		        LOOP    _printNumbersAsStrings
 000000F0  E8 00000000 E	        call    Crlf

				    mDisplayString  OFFSET  sumText         ; Displays text preceding the sum
 000000F5  52		     1	    push    edx
 000000F6  BA 000001A9 R     1	    mov     edx,    OFFSET  sumText    ; Memory location of the string
 000000FB  E8 00000000 E     1	    call    WriteString
 00000100  5A		     1	    pop     edx

 00000101  68 000002BD R	    push    OFFSET stringResult
 00000106  FF 35 000002FD R	    push    sum
 0000010C  E8 00000155		    call    WriteVal                        ; Prints to screen the sum
 00000111  E8 00000000 E	    call    Crlf

				    mDisplayString  OFFSET  averageText
 00000116  52		     1	    push    edx
 00000117  BA 000001BF R     1	    mov     edx,    OFFSET  averageText    ; Memory location of the string
 0000011C  E8 00000000 E     1	    call    WriteString
 00000121  5A		     1	    pop     edx

 00000122  68 000002BD R	    push    OFFSET stringResult
 00000127  FF 35 00000305 R	    push    average
 0000012D  E8 00000134		    call    WriteVal                        ; Prints to screen the average

					Invoke ExitProcess,0	; exit to operating system
 00000132  6A 00	   *	    push   +000000000h
 00000134  E8 00000000 E   *	    call   ExitProcess
 00000139			main ENDP

				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Calls mGetString to get user input and converts said value to a signed integer using
				;   string primitives. Saves and restores registers used.
				;
				; Preconditions: mGetString needs to be defined.
				;
				; Receives:
				; [ebp+8] = number of characters read from user answer
				; [ebp+12] = maximum size for the user's answer
				; [ebp+16] = address that stores the user's answer
				; [ebp+20] = prompt asking the user for input
				; [ebp+24] = variable to store the result of converting the string to a signed integer
				; [ebp+28] = prompt informing the user of a wrong input
				; [ebp+32] = variable to store if the number inputted is too big
				;
				; returns:
				; [ebp+24] = integer obtained from converting the string.
				; [ebp+32] = flag indicating if the number is bigger than 32 bits.
				; ---------------------------------------------------------------------------------
 00000139			ReadVal PROC
				    ; Saves registers used by the procedure.
 00000139  55			    push    ebp
 0000013A  8B EC		    mov     ebp,        esp
 0000013C  50			    push    eax
 0000013D  53			    push    ebx
 0000013E  51			    push    ecx
 0000013F  52			    push    edx
 00000140  56			    push    esi
 00000141  57			    push    edi

				    ; Gets input from the user
				    mGetString  [ebp+20], [ebp+16], [ebp+12], [ebp+8]
 00000142  52		     1	    push    edx         
 00000143  51		     1	    push    ecx
 00000144  50		     1	    push    eax
 00000145  52		     2	    push    edx
 00000146  8B 55 14	     2	    mov     edx,    [ebp+20]    ; Memory location of the string
 00000149  E8 00000000 E     2	    call    WriteString
 0000014E  5A		     2	    pop     edx
 0000014F  8B 55 10	     1	    mov     edx,    [ebp+16]        
 00000152  8B 4D 0C	     1	    mov		ecx,    [ebp+12]  
 00000155  E8 00000000 E     1	    call    ReadString
 0000015A  89 55 10	     1	    mov     [ebp+16],  edx         ; Save user answer      
 0000015D  89 45 08	     1	    mov     [ebp+8],      eax         ; Save characters inputted
 00000160  58		     1	    pop     eax
 00000161  59		     1	    pop     ecx         
 00000162  5A		     1	    pop     edx

				    ; Initializes variables for future calculations
 00000163  8B 75 10		    mov     esi,        [ebp+16]
 00000166  33 FF		    xor     edi,        edi
 00000168  8B 4D 08		    mov     ecx,        [ebp+8]

				    ; Loads first character into al
 0000016B  FC			    cld
 0000016C  AC			    lodsb
 0000016D  0F BE C0		    movsx   eax,        al          ; Sign extends al to perform calculations.

				    ; Checks to see if number inputted is really large.
 00000170			    _initialSizeCheck:
 00000170  83 F9 0B		        cmp     ecx,        11
 00000173  0F 8F 000000C8	        jg      _sizeInputError
				    
				    ; Checks for the presence of a plus sign.
 00000179			    _plusSignCheck:
 00000179  83 F8 2B		        cmp     eax,        43
 0000017C  75 1D		        jne     _minusSignCheck
 0000017E  49			        dec     ecx
 0000017F  89 4D 08		        mov     [ebp+8],    ecx         ; Updates characters inputted to ignore the sign.
 00000182  BB 00000000		        mov     ebx,        0           ; Counter to check if we need to do negation later.
 00000187  AC			        lodsb
 00000188  0F BE C0		        movsx   eax,        al

				        ; Checks if the number is the maximum length for a 32bit 
				        ; and if the first number is higher than 2 (too large)
 0000018B  83 F9 0A		        cmp     ecx,        10
 0000018E  75 43		        jne     _numbersCheck
 00000190  83 F8 32		        cmp     eax,        50
 00000193  0F 8F 0000009B	        jg      _inputError  
 00000199  EB 38		        jmp     _numbersCheck

 0000019B			    _minusSignCheck:
 0000019B  83 F8 2D		        cmp     eax,        45
 0000019E  75 19		        jne     _sizeWithoutSign        
 000001A0  49			        dec     ecx
 000001A1  89 4D 08		        mov     [ebp+8],    ecx         ; Updates characters inputted to ignore the sign.
 000001A4  BB 00000001		        mov     ebx,        1           ; Counter to check if we need to do negation later.
 000001A9  AC			        lodsb
 000001AA  0F BE C0		        movsx   eax,        al

				        ; Checks if the number is the maximum length for a 32bit 
				        ; and if the first number is higher than 2 (too large)
 000001AD  83 F9 0A		        cmp     ecx,        10
 000001B0  75 21		        jne     _numbersCheck
 000001B2  83 F8 32		        cmp     eax,        50
 000001B5  7F 7D		        jg      _inputError  
 000001B7  EB 1A		        jmp     _numbersCheck

 000001B9			    _sizeWithoutSign:
 000001B9  BB 00000000		        mov     ebx,        0
 000001BE  83 F9 0A		        cmp     ecx,        10
 000001C1  7F 71		        jg      _inputError

				        ; Checks if the number is the maximum length for a 32bit 
				        ; and if the first number is higher than 2 (too large)
 000001C3  83 F9 0A		        cmp     ecx,        10
 000001C6  75 0B		        jne     _numbersCheck
 000001C8  83 F8 32		        cmp     eax,        50
 000001CB  7F 67		        jg      _inputError      
 000001CD  EB 04		        jmp     _numbersCheck
				    
				    ; Loads a new value to check.
 000001CF			    _checkLoop:
 000001CF  AC			        lodsb
 000001D0  0F BE C0		        movsx   eax,        al

				    ; Checks characters to see if they are valid inputs.
 000001D3			    _numbersCheck:
 000001D3  83 F8 30		        cmp     eax,        48
 000001D6  7C 5C		        jl      _inputError
 000001D8  83 F8 39		        cmp     eax,        57
 000001DB  7F 57		        jg      _inputError
 000001DD  83 E8 30		        sub     eax,        48
				        ; Saves eax, ebx and ecx to preserve their values.
 000001E0  53			        push    ebx                 ; Sign flag.
 000001E1  50			        push    eax                 ; Number obtained from character
 000001E2  51			        push    ecx                 ; Counter
 000001E3  B8 00000001		        mov     eax,        1       ; Initializes eax for multiplication.

				    ; Calculates the decimal position of the number.
 000001E8			    _decimalPosition:
 000001E8  83 F9 01		        cmp     ecx,        1
 000001EB  74 0B		        je      _continue
 000001ED  33 D2		        xor     edx,        edx
 000001EF  BB 0000000A		        mov     ebx,        10
 000001F4  F7 E3		        mul     ebx
 000001F6  E2 F0		        LOOP    _decimalPosition

 000001F8			    _continue:
 000001F8  59			        pop     ecx             ; Restore ecx
 000001F9  5B			        pop     ebx             ; eax value to ebx for multiplying
 000001FA  F7 E3		        mul     ebx
 000001FC  5B			        pop     ebx             ; Restore ebx flag
 000001FD  47			        inc     edi             ; Counter for numbers pushed to the stack.

 000001FE			    _pushValue:
 000001FE  50			        push    eax             ; Stores the number after multiplying by its decimal position.
 000001FF  E2 CE		        LOOP    _checkLoop

 00000201  58			    pop     eax                 ; Gets first number obtained
 00000202  83 FF 01		    cmp     edi,        1       ; Goes to sign if the number only has one integer.
 00000205  74 0A		    je      _sign
				    ; Copies number of integers pushed to ecx to use as a counter and updates them to rmove
				    ; the first number already popped.
 00000207  8B CF		    mov     ecx,        edi
 00000209  49			    dec     ecx
 0000020A  4F			    dec     edi

				    ; Gets the rest of the numbers and adds them to get the actual number.
 0000020B			    _getNumber:
 0000020B  5A			        pop     edx
 0000020C  03 C2		        add     eax,        edx
 0000020E  4F			        dec     edi
 0000020F  E2 FA		        LOOP    _getNumber

				    ; Checks ebx (sign flag) and performs operations as appropriate.
 00000211			    _sign:
 00000211  83 FB 01		        cmp     ebx,        1
 00000214  75 10		        jne     _positive
				        ; If it is negative, negate the value and compare its 2's complement
 00000216  F7 D8		        neg     eax    
 00000218  3D 80000000		        cmp     eax,        2147483648
 0000021D  72 15		        jb      _inputError             ; If it is less than that value, it means it overflowed.
 0000021F  8B 5D 18		        mov     ebx,        [ebp+24]
 00000222  89 03		        mov     [ebx],      eax
 00000224  EB 34		        jmp     _end

 00000226			    _positive:
 00000226  3D 7FFFFFFF		        cmp     eax,        2147483647
 0000022B  77 07		        ja      _inputError             ; If it is more than that it means it was too large of a positive number.
 0000022D  8B 5D 18		        mov     ebx,        [ebp+24]
 00000230  89 03		        mov     [ebx],      eax
 00000232  EB 26		        jmp     _end

				    ; Cleans the stack if at any point an invalid input is found.
 00000234			    _inputError:
 00000234  33 D2		        xor     edx,        edx
 00000236  8B C7		        mov     eax,        edi
 00000238  BF 00000004		        mov     edi,        4
 0000023D  F7 E7		        mul     edi
 0000023F  03 E0		        add     esp,        eax

				    ; Prints the error message to the console.
 00000241			    _sizeInputError:
 00000241  B8 00000001		        mov     eax,        1
 00000246  8B 5D 20		        mov     ebx,        [ebp+32]
 00000249  89 03		        mov     [ebx],      eax
				        mDisplayString      [ebp+28]
 0000024B  52		     1	    push    edx
 0000024C  8B 55 1C	     1	    mov     edx,    [ebp+28]    ; Memory location of the string
 0000024F  E8 00000000 E     1	    call    WriteString
 00000254  5A		     1	    pop     edx
 00000255  E8 00000000 E	        call    Crlf
				    
				    ; Restores registers used.
 0000025A			    _end:
 0000025A  5F			        pop     edi
 0000025B  5E			        pop     esi
 0000025C  5A			        pop     edx
 0000025D  59			        pop     ecx
 0000025E  5B			        pop     ebx
 0000025F  58			        pop     eax
 00000260  8B E5		        mov     esp,        ebp
 00000262  5D			        pop     ebp
 00000263  C2 001C		        ret     28

 00000266			ReadVal ENDP

				; ---------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; Converts a signed integer into a string before printing it to the console using
				;   mDisplayString. Saves and restores registers used.
				;
				; Preconditions: mDisplayString needs to be defined.
				;
				; Receives:
				; [ebp+8] = signed integer that is going to be converted into a string.
				; [ebp+12] = variable to store the string obtained after converting the signed integer.
				;
				; returns: None
				; ---------------------------------------------------------------------------------
 00000266			WriteVal PROC
				    ; Saves registers used by the procedure.
 00000266  55			    push    ebp
 00000267  8B EC		    mov     ebp,        esp
 00000269  57			    push    edi
 0000026A  50			    push    eax
 0000026B  53			    push    ebx
 0000026C  51			    push    ecx
 0000026D  52			    push    edx

				    ; Initializes variables for future calculations.
 0000026E  8B 7D 0C		    mov     edi,        [ebp+12]
 00000271  BB 0000000A		    mov     ebx,        10
 00000276  8B 45 08		    mov     eax,        [ebp+8]
 00000279  33 C9		    xor     ecx,        ecx         ; Tracks number of integers in the number.

				    ; Handle 0 value.
 0000027B  83 F8 00		    cmp     eax,        0
 0000027E  75 0B		    jne     _signCheck
 00000280  50			    push    eax
 00000281  33 C0		    xor     eax,        eax
 00000283  B0 30		    mov     al,         48
 00000285  FC			    cld
 00000286  AA			    stosb
 00000287  58			    pop     eax
 00000288  41			    inc     ecx
 00000289  EB 43		    jmp     _finish

				    ; Handle negative values
 0000028B			    _signCheck:
 0000028B  83 F8 00		        cmp     eax,        0
 0000028E  79 1A		        jns     _positive
				        ; Adds negative sign to the start of the string.
 00000290  50			        push    eax
 00000291  33 C0		        xor     eax,        eax
 00000293  B0 2D		        mov     al,         45
 00000295  FC			        cld
 00000296  AA			        stosb

				        ; If the number is negative, divides the value by 10
				        ; then negate the remainder to store for later, then
				        ; negates the quotient for future calculations.
				        ; (this handles cases where firs division would overflow)
 00000297  41			        inc     ecx
 00000298  58			        pop     eax
 00000299  33 D2		        xor     edx,        edx
 0000029B  99			        cdq
 0000029C  F7 FB		        idiv    ebx
 0000029E  F7 DA		        neg     edx
 000002A0  52			        push    edx
 000002A1  F7 D8		        neg     eax
 000002A3  83 F8 00		        cmp     eax,        0       ; Reached the end of the number.
 000002A6  75 12		        jne     _continue
 000002A8  EB 1C		        jmp     _getNumbers

				    
 000002AA			    _positive:
 000002AA  33 D2		        xor     edx,        edx
 000002AC  99			        cdq
 000002AD  F7 F3		        div     ebx
 000002AF  52			        push    edx
 000002B0  B9 00000001		        mov     ecx,        1       
 000002B5  83 F8 00		        cmp     eax,        0       ; Reached the end of the number.
 000002B8  74 0C		        je     _getNumbers

 000002BA			    _continue:
 000002BA  99			        cdq
 000002BB  F7 F3		        div     ebx
 000002BD  52			        push    edx
 000002BE  41			        inc     ecx
 000002BF  83 F8 00		        cmp     eax,        0       ; Reached the end of the number.
 000002C2  75 F6		        jne     _continue
 000002C4  8B D1		        mov     edx,        ecx

				    ; Adds rest of the numbers to the string.
 000002C6			    _getNumbers:
 000002C6  58			        pop     eax
 000002C7  83 C0 30		        add     eax,        48
 000002CA  FC			        cld
 000002CB  AA			        stosb
 000002CC  E2 F8		        LOOP    _getNumbers

 000002CE			    _finish:
 000002CE  B8 00000000		        mov     eax,        0       ; null terminator
 000002D3  FC			        cld
 000002D4  AA			        stosb

				        mDisplayString  [ebp+12]
 000002D5  52		     1	    push    edx
 000002D6  8B 55 0C	     1	    mov     edx,    [ebp+12]    ; Memory location of the string
 000002D9  E8 00000000 E     1	    call    WriteString
 000002DE  5A		     1	    pop     edx

				        ; Restores registers used.
 000002DF  5A			        pop     edx
 000002E0  59			        pop     ecx
 000002E1  5B			        pop     ebx
 000002E2  58			        pop     eax
 000002E3  5F			        pop     edi
 000002E4  8B E5		        mov     esp,        ebp
 000002E6  5D			        pop     ebp
 000002E7  C2 0008		        ret     8
 000002EA			WriteVal ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30148.0	    06/10/23 01:15:05
1Low-level I/O procedures     (Proj6_brunimom.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000309 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002EA Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000139 _TEXT	Length= 0000012D Public STDCALL
  _initialSizeCheck  . . . . . .	L Near	 00000170 _TEXT	
  _plusSignCheck . . . . . . . .	L Near	 00000179 _TEXT	
  _minusSignCheck  . . . . . . .	L Near	 0000019B _TEXT	
  _sizeWithoutSign . . . . . . .	L Near	 000001B9 _TEXT	
  _checkLoop . . . . . . . . . .	L Near	 000001CF _TEXT	
  _numbersCheck  . . . . . . . .	L Near	 000001D3 _TEXT	
  _decimalPosition . . . . . . .	L Near	 000001E8 _TEXT	
  _continue  . . . . . . . . . .	L Near	 000001F8 _TEXT	
  _pushValue . . . . . . . . . .	L Near	 000001FE _TEXT	
  _getNumber . . . . . . . . . .	L Near	 0000020B _TEXT	
  _sign  . . . . . . . . . . . .	L Near	 00000211 _TEXT	
  _positive  . . . . . . . . . .	L Near	 00000226 _TEXT	
  _inputError  . . . . . . . . .	L Near	 00000234 _TEXT	
  _sizeInputError  . . . . . . .	L Near	 00000241 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 0000025A _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000266 _TEXT	Length= 00000084 Public STDCALL
  _signCheck . . . . . . . . . .	L Near	 0000028B _TEXT	
  _positive  . . . . . . . . . .	L Near	 000002AA _TEXT	
  _continue  . . . . . . . . . .	L Near	 000002BA _TEXT	
  _getNumbers  . . . . . . . . .	L Near	 000002C6 _TEXT	
  _finish  . . . . . . . . . . .	L Near	 000002CE _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000139 Public STDCALL
  _inputs  . . . . . . . . . . .	L Near	 00000034 _TEXT	
  _addResult . . . . . . . . . .	L Near	 00000073 _TEXT	
  _calculate . . . . . . . . . .	L Near	 0000008E _TEXT	
  _continue  . . . . . . . . . .	L Near	 00000092 _TEXT	
  _printNumbersAsStrings . . . .	L Near	 000000CB _TEXT	
  _noComma . . . . . . . . . . .	L Near	 000000EE _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arraySize  . . . . . . . . . . .	DWord	 00000211 _DATA	
averageText  . . . . . . . . . .	Byte	 000001BF _DATA	
average  . . . . . . . . . . . .	DWord	 00000305 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesRead  . . . . . . . . . . .	DWord	 000001E5 _DATA	
comma  . . . . . . . . . . . . .	Byte	 000001E3 _DATA	
count  . . . . . . . . . . . . .	DWord	 00000301 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error  . . . . . . . . . . . . .	Byte	 0000015C _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 00000000 _DATA	
inputArray . . . . . . . . . . .	DWord	 000001E9 _DATA	
inputBuffer  . . . . . . . . . .	DWord	 000002B9 _DATA	
intro1 . . . . . . . . . . . . .	Byte	 00000049 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 000000BC _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numbersText  . . . . . . . . . .	Byte	 00000189 _DATA	
readValResult  . . . . . . . . .	DWord	 000002F9 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
stringResult . . . . . . . . . .	DWord	 000002BD _DATA	
sumText  . . . . . . . . . . . .	Byte	 000001A9 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 000002FD _DATA	
tooBig . . . . . . . . . . . . .	DWord	 000002F5 _DATA	
userAnswer . . . . . . . . . . .	DWord	 00000215 _DATA	
userPrompt . . . . . . . . . . .	Byte	 0000013B _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
